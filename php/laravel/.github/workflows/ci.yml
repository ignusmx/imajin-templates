name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.2, 8.3]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Create .env file
      run: |
        cp .env.example .env
        sed -i 's/APP_KEY=/APP_KEY=base64:$(php -r "echo base64_encode(random_bytes(32));")/g' .env
    
    - name: Build Docker images
      run: |
        docker compose build --build-arg BUILDKIT_INLINE_CACHE=1 \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max
    
    - name: Start services
      run: |
        docker compose up -d
        sleep 30
    
    - name: Wait for database
      run: |
        timeout 60 bash -c 'until docker compose exec -T db pg_isready -U postgres; do sleep 2; done'
    
    - name: Install dependencies
      run: |
        docker compose exec -T app composer install --no-interaction --prefer-dist --optimize-autoloader
        docker compose exec -T app npm ci
    
    - name: Generate application key
      run: |
        docker compose exec -T app php artisan key:generate --no-interaction
    
    - name: Run migrations
      run: |
        docker compose exec -T app php artisan migrate --no-interaction --force
    
    - name: Run PHP linting
      run: |
        docker compose exec -T app composer require laravel/pint --dev --no-interaction
        docker compose exec -T app ./vendor/bin/pint --test
    
    - name: Run static analysis
      run: |
        docker compose exec -T app composer require phpstan/phpstan --dev --no-interaction
        docker compose exec -T app ./vendor/bin/phpstan analyse --no-progress --error-format=github
    
    - name: Run security audit
      run: |
        docker compose exec -T app composer audit --no-dev
    
    - name: Run tests
      run: |
        docker compose exec -T app php artisan test --coverage --min=80
    
    - name: Run performance tests
      run: |
        docker compose exec -T app php artisan route:cache
        docker compose exec -T app php artisan config:cache
        docker compose exec -T app php artisan view:cache
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        fail_ci_if_error: false
    
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v
        docker system prune -f
    
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  build-production:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build production image
      run: |
        docker build --target production -t laravel-app:latest .
    
    - name: Test production image
      run: |
        docker run --rm laravel-app:latest php artisan --version
    
    - name: Security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'laravel-app:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 